#ifndef COM_DEFS_H
#define COM_DEFS_H

#define UART_DATA_SIZE 6

typedef enum command
{
    COM_DATA_TEMP = 0x11,
    COM_DATA_HUM = 0x12,
    COM_DATA_PRESS = 0x13,
    COM_HEATER_STATE = 0x14,
    COM_HUMIDIF_STATE = 0x15,
    COM_START = 0x1A,

    COM_MEAS_REQUEST = 0x21,
    COM_CHNG_PERIOD = 0x22,
    COM_HEATER_COMMAND = 0x23,
    COM_HUMIDIF_COMMAND = 0x24,
    COM_HEATER_THRESHOLD = 0x25,
    COM_HUMIDIF_THRESHOLD = 0x26,
} eCommand;

typedef enum commandMode
{
    SET_MODE_OFF = 10,
    SET_MODE_ON = 11,
    SET_MODE_AUTO = 12
} eCommandMode;

typedef enum control
{
    CTRL_HEATER_AUTO_MODE = 0x11,
    CTRL_HEATER_CHNG_STATE = 0x12,
    CTRL_HEATER_TEMP = 0x13,
    CTRL_HEATER_THRES = 0x14,
    CTRL_HEATER_AUTOMODE_OFF = 0x15,
    CTRL_HEATER_OFF = 0x16,
    CTRL_HEATER_ON = 0x17,

    CTRL_HUMIDIF_AUTO_MODE = 0x21,
    CTRL_HUMIDIF_CHNG_STATE = 0x22,
    CTRL_HUMIDIF_HUM = 0x23,
    CTRL_HUMIDIF_THRES = 0x24,
    CTRL_HUMIDIF_AUTOMODE_OFF = 0x25,
    CTRL_HUMIDIF_OFF = 0x26,
    CTRL_HUMIDIF_ON = 0x27
} eControl;

// #define COM_DATA_TEMP 0x11
// #define COM_DATA_HUM 0x12
// #define COM_DATA_PRESS 0x13
// #define COM_HEATER_STATE 0x14
// #define COM_HUMIDIF_STATE 0x15
// #define COM_START 0x1A

// #define COM_MEAS_REQUEST 0x21
// #define COM_CHNG_PERIOD 0x22
// #define COM_HEATER_COMMAND 0x23
// #define COM_HUMIDIF_COMMAND 0x24
// #define COM_HEATER_THRESHOLD 0x25
// #define COM_HUMIDIF_THRESHOLD 0x26

// #define SET_MODE_OFF 10
// #define SET_MODE_ON 11
// #define SET_MODE_AUTO 12

// #define CTRL_HEATER_AUTO_MODE 0x11
// #define CTRL_HEATER_CHNG_STATE 0x12
// #define CTRL_HEATER_TEMP 0x13
// #define CTRL_HEATER_THRES 0x14
// #define CTRL_HEATER_AUTOMODE_OFF 0x15
// #define CTRL_HEATER_OFF 0x16
// #define CTRL_HEATER_ON 0x17

// #define CTRL_HUMIDIF_AUTO_MODE 0x21
// #define CTRL_HUMIDIF_CHNG_STATE 0x22
// #define CTRL_HUMIDIF_HUM 0x23
// #define CTRL_HUMIDIF_THRES 0x24
// #define CTRL_HUMIDIF_AUTOMODE_OFF 0x25
// #define CTRL_HUMIDIF_OFF 0x26
// #define CTRL_HUMIDIF_ON 0x27

#endif /*com_defs.h*/